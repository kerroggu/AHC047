- Implemented a minimal solver in a.cpp
- Selected the highest weighted string and output a deterministic Markov chain cycling through that string.
- Verified compilation and ran the program on test cases 0000 to 0014.
- Could not compute scores locally because visualizer requires network dependencies.
- Future work: vendor Rust dependencies or pre-build the tester for offline scoring.
- Still unable to verify scores without tester.
- Implemented new 12-state automaton using top two strings with 41%/33% transitions.
- Merged transitions from top four strings into a single 12-state automaton with at most three next letters per state.
- run_all_par.sh failed because tester.exe is missing.
- Fixed probability distribution bug: leftover transitions no longer add to next-letter states.
- Found probability 0 bug for second-best string because transitions with more than 3 options were truncated. Updated build() to keep all options and distribute 99/k when k>3.
- Added anneal_matrix move that boosts probabilities along a random path for one of top 7 strings.
- Implemented weighted bigram initialization and updated solver (score 716385).
- Added simple enumeration solver b.cpp choosing between two top strings for each state. Score ~725k on sample.
